generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid       Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nickname  String
  email     String? @unique
  hash      String?
  statusQuo String  @default("")
  avatar    Int     @default(1)

  verified Boolean @default(false)

  githubId String? @unique
  googleId String? @unique
  kakaoId  String? @unique

  friendship_friendFromTousers Friendship[] @relation("friendship_friendFromTousers")
  friendship_friendToTousers   Friendship[] @relation("friendship_friendToTousers")

  Record Record[]
  Room   Room[]

  @@map("users")
}

model Room {
  itemId    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  title   String
  details String?
  tags    String[]
  total   Int
  current Int      @default(0)
  theme   String

  moderatorId Int
  moderator   User @relation(fields: [moderatorId], references: [uid], onDelete: SetNull)

  @@map("rooms")
}

model Record {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   Int
  duration Int     @default(0)
  room     String?
  user     User    @relation(fields: [userId], references: [uid], onDelete: Cascade)

  @@map("records")
}

model Friendship {
  friendFrom Int
  friendTo   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status status @default(PENDING)

  friendship_friendFromTousers User @relation("friendship_friendFromTousers", fields: [friendFrom], references: [uid], onDelete: Cascade, onUpdate: NoAction)
  friendship_friendToTousers   User @relation("friendship_friendToTousers", fields: [friendTo], references: [uid], onDelete: Cascade, onUpdate: NoAction)

  @@id([friendFrom, friendTo])
  @@map("friendships")
}

enum status {
  PENDING
  ACCEPTED
  YOU
}
